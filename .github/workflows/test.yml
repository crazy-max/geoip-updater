name: test

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - 'master'
      - 'v*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
      - 'v*'
    paths-ignore:
      - '**.md'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.2
      -
        name: Prepare
        id: prep
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::geoip-updater
          echo ::set-output name=running_timeout::120
          echo ::set-output name=running_log_check::GeoLite2-Country.mmdb database successfully updated
      -
        name: Docker Build
        run: |
          docker build --tag ${{ steps.prep.outputs.build_tag }} --file Dockerfile .
      -
        name: Start container
        run: |
          docker run -d --name ${{ steps.prep.outputs.container_name }} \
            -e "EDITION_IDS=GeoLite2-ASN,GeoLite2-City,GeoLite2-Country" \
            -e "LICENSE_KEY=${{ secrets.LICENSE_KEY_NEW }}" \
            -e "DOWNLOAD_PATH=/data" \
            -e "SCHEDULE=0 0 * * 0" \
            -e "LOG_LEVEL=info" \
            -e "LOG_JSON=false" \
            ${{ steps.prep.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prep.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prep.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prep.outputs.container_name }} container"
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prep.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prep.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prep.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            exit 1
          fi
      -
        name: Container logs
        if: always()
        run: |
          docker logs ${{ steps.prep.outputs.container_name }}
          docker rm -f ${{ steps.prep.outputs.container_name }} > /dev/null 2>&1 || true
